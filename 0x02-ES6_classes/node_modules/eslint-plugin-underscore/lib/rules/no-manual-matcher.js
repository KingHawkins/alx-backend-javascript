/**
 * @fileoverview Use the matcher functionality of Underscore iteratees
 * @author Jordan Eldredge
 * @copyright 2016 Jordan Eldredge. All rights reserved.
 * See LICENSE file in root directory for full license.
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function(context) {

  // variables should be defined here

  //--------------------------------------------------------------------------
  // Helpers
  //--------------------------------------------------------------------------
  var iterateeFunctions = [
    'map', 'collect',
    'find', 'detect',
    'filter', 'select',
    'reject',
    'every', 'all',
    'some', 'any',
    'max',
    'min',
    'sortBy',
    'groupBy',
    'indexBy',
    'countBy',
    'sortedIndex',
    'partition',
    'uniq', 'unique'];

    var isUnderscoreFunctionCall = function(node) {
      return node.callee.type === 'MemberExpression' && node.callee.object.name === '_';
    };

    var acceptsIteratee = function(node) {
      return iterateeFunctions.indexOf(node.name) > -1;;
    }

    var isManualMatcher = function(node) {
      return node.type === 'FunctionExpression' &&
        node.body.body.length &&
        node.body.body[0].type === 'ReturnStatement' &&

        node.body.body[0].argument.type === 'BinaryExpression' && (
          node.body.body[0].argument.operator === '===' ||
            node.body.body[0].argument.operator === '=='
      ) && (

      isPropertyAccess(node.body.body[0].argument.right, node.params[0].name) ||
        isPropertyAccess(node.body.body[0].argument.left, node.params[0].name)
      );
    }

    var isPropertyAccess = function(node, propertyName) {
      return node.type === 'MemberExpression' &&
        node.computed === false &&
        node.object.name === propertyName;
    }

    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------

    return {
      CallExpression: function (node) {
        if(isUnderscoreFunctionCall(node) &&
           acceptsIteratee(node.callee.property) &&
             node.arguments.length > 1 &&
               isManualMatcher(node.arguments[1])) {
          context.report(node, "Use Underscore's {key: value} matcher syntax");
        }
      },

    };

};

module.exports.schema = [
  // fill in your schema
];
